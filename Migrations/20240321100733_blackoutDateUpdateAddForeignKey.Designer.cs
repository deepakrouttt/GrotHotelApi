// <auto-generated />
using System;
using GrotHotelApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GrotHotelApi.Migrations
{
    [DbContext(typeof(GrotHotelApiDbContext))]
    [Migration("20240321100733_blackoutDateUpdateAddForeignKey")]
    partial class blackoutDateUpdateAddForeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrotHotel.Models.Booking", b =>
                {
                    b.Property<int?>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("BookingId"));

                    b.Property<int>("Adult")
                        .HasColumnType("int");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookingId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("GrotHotelApi.Models.BlackOutDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoomRateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomRateId")
                        .IsUnique();

                    b.ToTable("BlackOutDates");
                });

            modelBuilder.Entity("GrotHotelApi.Models.DateEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlackOutDateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlackOutDateId");

                    b.ToTable("DateEntries");
                });

            modelBuilder.Entity("GrotHotelApi.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ChildAgeRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("HotelId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("GrotHotelApi.Models.HotelRoom", b =>
                {
                    b.Property<int>("HotelRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelRoomId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("RoomPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelRoomId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelRooms");
                });

            modelBuilder.Entity("GrotHotelApi.Models.RoomRate", b =>
                {
                    b.Property<int>("RoomRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomRateId"));

                    b.Property<decimal>("AdultRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoubleRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HotelRoomId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChildAllow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsException")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExtraAdult")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSingleEqualDouble")
                        .HasColumnType("bit");

                    b.Property<decimal>("SingleRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TripleRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("childRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RoomRateId");

                    b.HasIndex("HotelRoomId");

                    b.ToTable("RoomRates");
                });

            modelBuilder.Entity("GrotHotelApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GrotHotelApi.Models.BlackOutDate", b =>
                {
                    b.HasOne("GrotHotelApi.Models.RoomRate", null)
                        .WithOne("BlackOutDate")
                        .HasForeignKey("GrotHotelApi.Models.BlackOutDate", "RoomRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrotHotelApi.Models.DateEntry", b =>
                {
                    b.HasOne("GrotHotelApi.Models.BlackOutDate", "BlackOutDate")
                        .WithMany("Dates")
                        .HasForeignKey("BlackOutDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlackOutDate");
                });

            modelBuilder.Entity("GrotHotelApi.Models.HotelRoom", b =>
                {
                    b.HasOne("GrotHotelApi.Models.Hotel", null)
                        .WithMany("HotelRooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrotHotelApi.Models.RoomRate", b =>
                {
                    b.HasOne("GrotHotelApi.Models.HotelRoom", null)
                        .WithMany("RoomRates")
                        .HasForeignKey("HotelRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrotHotelApi.Models.BlackOutDate", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("GrotHotelApi.Models.Hotel", b =>
                {
                    b.Navigation("HotelRooms");
                });

            modelBuilder.Entity("GrotHotelApi.Models.HotelRoom", b =>
                {
                    b.Navigation("RoomRates");
                });

            modelBuilder.Entity("GrotHotelApi.Models.RoomRate", b =>
                {
                    b.Navigation("BlackOutDate");
                });
#pragma warning restore 612, 618
        }
    }
}
